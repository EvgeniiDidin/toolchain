##############################################################################
# Copyright (C) 2014-2015 Synopsys Inc.
#
# Contributor Anton Kolesov <Anton.Kolesov@synopsys.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
# This is a script to create prebuilt packages of GNU Toolchain
#
##############################################################################

#
# How to use:
#
# This is a script to create prebuilt packages of GNU Toolchain
#
# 1. Checkout toolchain directory to desired branch. Create tags if needed.
#
# 2. Run "make -f Makefile.release RELEASE=<release>". If you do not want
# build-all.sh to checkout directories, then do "touch
# ../release_output/.stamp_checked_out
#

BUILDALLFLAGS := --disable-werror --strip --rel-rpaths --no-auto-pull \
--no-auto-checkout --config-extra '--with-python=no LDFLAGS=-static'

#
# Output artifacts
#
O := ../release_output
OS_NAME := linux
SOURCE_TARBALL_CONTENTS :=$(addprefix ../,binutils cgen gcc gdb newlib toolchain uClibc)
SOURCE_TARBALL_TGZ := $O/arc_gnu_$(RELEASE)_sources.tar.gz
# Baremetal toolchain
ELF_LE_NAME := arc_gnu_$(RELEASE)_prebuilt_elf32_le_$(OS_NAME)_install
ELF_BE_NAME := arc_gnu_$(RELEASE)_prebuilt_elf32_be_$(OS_NAME)_install
ELF_LE_DIR := arc-elf32
ELF_BE_DIR := arceb-elf32
ELF_LE_TGZ := $(ELF_LE_NAME).tar.gz
ELF_BE_TGZ := $(ELF_BE_NAME).tar.gz
# Linux toolchain
LINUX_LE_700_NAME := arc_gnu_$(RELEASE)_prebuilt_uclibc_le_arc700_$(OS_NAME)_install
LINUX_LE_HS_NAME := arc_gnu_$(RELEASE)_prebuilt_uclibc_le_archs_$(OS_NAME)_install
LINUX_BE_700_NAME := arc_gnu_$(RELEASE)_prebuilt_uclibc_be_arc700_$(OS_NAME)_install
LINUX_BE_HS_NAME := arc_gnu_$(RELEASE)_prebuilt_uclibc_be_archs_$(OS_NAME)_install
LINUX_LE_700_DIR := arc700-linux
LINUX_BE_700_DIR := arceb700-linux
LINUX_LE_HS_DIR := archs-linux
LINUX_BE_HS_DIR := arcebhs-linux
LINUX_LE_700_TGZ := $(LINUX_LE_700_NAME).tar.gz
LINUX_BE_700_TGZ := $(LINUX_BE_700_NAME).tar.gz
LINUX_LE_HS_TGZ := $(LINUX_LE_HS_NAME).tar.gz
LINUX_BE_HS_TGZ := $(LINUX_BE_HS_NAME).tar.gz
# Baremetal for Windows
WIN_ELF_LE_NAME := arc_gnu_$(RELEASE)_prebuilt_elf32_le_win_install
WIN_ELF_BE_NAME := arc_gnu_$(RELEASE)_prebuilt_elf32_be_win_install
WIN_ELF_LE_DIR  := arc-elf32_win
WIN_ELF_BE_DIR  := arceb-elf32_win
WIN_ELF_LE_TGZ  := $(WIN_ELF_LE_NAME).tar.gz
WIN_ELF_BE_TGZ  := $(WIN_ELF_BE_NAME).tar.gz
# Big endian toolchain is installed to same directory as little endian
#WIN_ELF_BE_DIR := $O/arceb-elf32_windows
# md5sum
MD5SUM_FILE := md5.sum

# IDE
# Coma separated list
ECLIPSE_REPO := http://download.eclipse.org/releases/luna
# Coma separated list
ECLIPSE_PREREQ := org.eclipse.tm.terminal.serial,org.eclipse.tm.terminal.view
ECLIPSE_VERSION := luna-SR2
ECLIPSE_DL_LINK_BASE := http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/luna/SR2
ECLIPSE_ARC_PLUGIN_DIR := arc_gnu_ide_$(RELEASE)_plugins
ECLIPSE_ARC_PLUGIN_TGZ := $(ECLIPSE_ARC_PLUGIN_DIR).zip
LINUX_IDE_NAME := arc_gnu_ide_$(RELEASE)_linux_install
LINUX_IDE_TGZ := $(LINUX_IDE_NAME).tar.gz
ECLIPSE_VANILLA_WIN_TGZ := eclipse-cpp-$(ECLIPSE_VERSION)-win32.zip
ECLIPSE_VANILLA_LINUX_TGZ := eclipse-cpp-$(ECLIPSE_VERSION)-linux-gtk-x86_64.tar.gz

ifeq ($(RELEASE),)
$(error RELEASE variable can not be empty)
endif

#
# Human friendly aliases
#
.PHONY: checkout source-tarball elf-le-build elf-be-build elf-le elf-be all

all: $O/$(MD5SUM_FILE)
	@echo "MD5 sums:"
	@cat $<

$O/$(MD5SUM_FILE): \
    $O/.stamp_source_tarball \
    $O/.stamp_elf_le_tarball $O/.stamp_elf_be_tarball \
    $O/.stamp_linux_le_700_tarball $O/.stamp_linux_be_700_tarball \
    $O/.stamp_linux_le_hs_tarball $O/.stamp_linux_be_hs_tarball \
    $O/.stamp_elf_le_windows_tarball \
    $O/.stamp_elf_be_windows_tarball
	cd $O && md5sum *linux_install.tar.gz *sources.tar.gz *.zip > $@


checkout: $O/.stamp_checked_out

source-tarball: $O/.stamp_source_tarball

elf-le-build: $O/.stamp_elf_le_built

elf-be-build: $O/.stamp_elf_be_built

elf-le: $O/.stamp_elf_le_tarball

elf-be: $O/.stamp_elf_be_tarball

#
# Real targets
#
$O:
	mkdir -p $@

# Checkout sources
.NOTPARALLEL: $O/.stamp_checked_out
$O/.stamp_checked_out: | $O
	./build-all.sh --auto-pull --auto-checkout --no-elf32 --no-uclibc
	touch $@

# Create source tarball
.NOTPARALLEL: $O/.stamp_source_tarball
$O/.stamp_source_tarball: $O/.stamp_checked_out
	tar --exclude-vcs -c -z -f $(SOURCE_TARBALL_TGZ) --exclude=$O --transform="s|^|arc_gnu_$(RELEASE)_sources/|" $(SOURCE_TARBALL_CONTENTS)
	touch $@

$O/.stamp_elf_le_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(ELF_LE_DIR) \
	    --no-uclibc --release-name $(RELEASE)
	touch $@

$O/.stamp_elf_be_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(ELF_BE_DIR) \
	    --no-uclibc --release-name $(RELEASE) --big-endian
	touch $@

$O/.stamp_elf_le_tarball: $O/.stamp_elf_le_built
	cd $O && tar czf $(ELF_LE_TGZ) --transform='s#$(ELF_LE_DIR)#$(ELF_LE_NAME)#' $(ELF_LE_DIR)/
	touch $@

$O/.stamp_elf_be_tarball: $O/.stamp_elf_be_built
	cd $O && tar czf $(ELF_BE_TGZ) --transform='s#$(ELF_BE_DIR)#$(ELF_BE_NAME)#' $(ELF_BE_DIR)/
	touch $@

$O/.stamp_linux_le_700_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(LINUX_LE_700_DIR) \
	    --no-elf32 --release-name $(RELEASE) --cpu arc700
	touch $@

$O/.stamp_linux_le_hs_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(LINUX_LE_HS_DIR) \
	    --no-elf32 --release-name $(RELEASE) --cpu archs
	touch $@

$O/.stamp_linux_be_700_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(LINUX_BE_700_DIR) \
	    --no-elf32 --release-name $(RELEASE) --big-endian --cpu arc700
	touch $@

$O/.stamp_linux_be_hs_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(LINUX_BE_HS_DIR) \
	    --no-elf32 --release-name $(RELEASE) --big-endian --cpu archs
	touch $@

$O/.stamp_linux_le_700_tarball: $O/.stamp_linux_le_700_built
	cd $O && tar czf $(LINUX_LE_700_TGZ) --transform='s#$(LINUX_LE_700_DIR)#$(LINUX_LE_700_NAME)#' $(LINUX_LE_700_DIR)/
	touch $@

$O/.stamp_linux_le_hs_tarball: $O/.stamp_linux_le_hs_built
	cd $O && tar czf $(LINUX_LE_HS_TGZ) --transform='s#$(LINUX_LE_HS_DIR)#$(LINUX_LE_HS_NAME)#' $(LINUX_LE_HS_DIR)/
	touch $@

$O/.stamp_linux_be_700_tarball: $O/.stamp_linux_be_700_built
	cd $O && tar czf $(LINUX_BE_700_TGZ) --transform='s#$(LINUX_BE_700_DIR)#$(LINUX_BE_700_NAME)#' $(LINUX_BE_700_DIR)/
	touch $@

$O/.stamp_linux_be_hs_tarball: $O/.stamp_linux_be_hs_built
	cd $O && tar czf $(LINUX_BE_HS_TGZ) --transform='s#$(LINUX_BE_HS_DIR)#$(LINUX_BE_HS_NAME)#' $(LINUX_BE_HS_DIR)/
	touch $@

#
# Windows build
#
$O/.stamp_elf_le_windows_built: $O/.stamp_checked_out $O/.stamp_elf_le_built
	PATH=$(shell readlink -e $O/$(ELF_LE_DIR)/bin):$$PATH ./build-all.sh $(BUILDALLFLAGS) \
	     --install-dir $O/$(WIN_ELF_LE_DIR) --no-uclibc --no-sim --release-name $(RELEASE) \
	     --host i686-w64-mingw32
	touch $@

$O/.stamp_elf_be_windows_built: $O/.stamp_checked_out $O/.stamp_elf_be_built
	# Install toolchain in the same dir as little endian
	PATH=$(shell readlink -e $O/$(ELF_BE_DIR))/bin:$$PATH ./build-all.sh $(BUILDALLFLAGS) \
	     --install-dir $O/$(WIN_ELF_BE_DIR) --no-uclibc --big-endian --no-sim \
	     --release-name $(RELEASE) --host i686-w64-mingw32
	touch $@

$O/.stamp_elf_le_windows_tarball: $O/.stamp_elf_le_windows_built
	cd $O && tar czf $(WIN_ELF_LE_TGZ) \
	    --transform='s#$(WIN_ELF_LE_DIR)#$(WIN_ELF_LE_NAME)#' $(WIN_ELF_LE_DIR)/
	cd $O && zip -q -r $(WIN_ELF_LE_NAME).zip $(WIN_ELF_LE_DIR)/
	touch $@

$O/.stamp_elf_be_windows_tarball: $O/.stamp_elf_be_windows_built
	cd $O && tar czf $(WIN_ELF_BE_TGZ) \
	    --transform='s#$(WIN_ELF_BE_DIR)#$(WIN_ELF_BE_NAME)#' $(WIN_ELF_BE_DIR)/
	cd $O && zip -q -r $(WIN_ELF_BE_NAME).zip $(WIN_ELF_BE_DIR)/
	touch $@

#
# IDE related targets
#
.PHONY: ide
ide: $O/.stamp_ide_linux_tar $O/$(ECLIPSE_ARC_PLUGIN_TGZ)

$O/$(ECLIPSE_ARC_PLUGIN_TGZ): $O/$(ECLIPSE_ARC_PLUGIN_DIR)
	cd $O/$(ECLIPSE_ARC_PLUGIN_DIR) && zip -q -r ../$(ECLIPSE_ARC_PLUGIN_TGZ) *

$O/$(ECLIPSE_VANILLA_LINUX_TGZ):
	wget -nv -O $@ '$(ECLIPSE_DL_LINK_BASE)/$(ECLIPSE_VANILLA_LINUX_TGZ)&r=1'

$O/$(ECLIPSE_VANILLA_WIN_TGZ):
	wget -nv -O $@ '$(ECLIPSE_DL_LINK_BASE)/$(ECLIPSE_VANILLA_WIN_TGZ)&r=1'

$O/.stamp_ide_linux_eclipse: $O/$(ECLIPSE_VANILLA_LINUX_TGZ)
	mkdir -p $O/$(LINUX_IDE_NAME)
	tar xaf $< -C $O/$(LINUX_IDE_NAME)
	$O/$(LINUX_IDE_NAME)/eclipse/eclipse \
	    -application org.eclipse.equinox.p2.director \
	    -noSplash \
	    -repository $(ECLIPSE_REPO),file://$(realpath $O/$(ECLIPSE_ARC_PLUGIN_DIR)) \
	    -installIU $(ECLIPSE_PREREQ),com.arc.cdt.feature.feature.group
	touch $@

$O/.stamp_ide_linux_tar: \
	$O/.stamp_ide_linux_eclipse \
	$O/.stamp_elf_be_built $O/.stamp_elf_le_built \
	$O/.stamp_linux_be_hs_built $O/.stamp_linux_le_hs_built
	cp -ad $O/$(ELF_LE_DIR)/* $O/$(LINUX_IDE_NAME)
	cp -ad $O/$(ELF_BE_DIR)/* $O/$(LINUX_IDE_NAME)
	cp -ad $O/$(LINUX_LE_HS_DIR)/* $O/$(LINUX_IDE_NAME)
	cp -ad $O/$(LINUX_BE_HS_DIR)/* $O/$(LINUX_IDE_NAME)
	tar caf $O/$(LINUX_IDE_TGZ) -C $O $(LINUX_IDE_NAME)
	touch $@

#
# Clean
#
.PHONY: clean
clean:
	-rm -rf $O
